# GitFairy Security Policy

## 1. Introduction

This security policy outlines the measures and practices implemented in GitFairy to ensure the protection of user data and system integrity.
It focuses on client-side security and privacy-first development practices.

## 2. Scope and Objectives

This policy applies to the GitFairy desktop application, including:

- Desktop application security
- Credential management
- Update distribution
- Third-party integrations
- User data handling

Our primary objectives are to:

- Protect user credentials and privacy
- Maintain application integrity
- Ensure secure Git operations
- Foster security-conscious development

## 3. Security Boundaries and Threat Model

### 3.1 Security Boundaries

- Desktop application runtime environment
- Local file system access
- Git provider authentication
- Credential storage systems

### 3.2 Threat Model

We protect against:

- Credential exposure
- Unauthorized file system access
- Man-in-the-middle attacks
- Client-side code tampering
- Supply chain attacks
- Malicious Git hooks

## 4. Authentication and Authorization

### 4.1 OAuth2 Implementation

- Authorization Code flow with PKCE
- No client secrets in application
- Strict HTTPS enforcement
- Registered redirect URIs
- Secure token storage
- Token expiry management

### 4.2 SSH Authentication

- System SSH agent integration
- Key generation best practices
- Known hosts verification
- Key usage monitoring

## 5. Secure Credential Storage

Platform-specific secure storage:

- macOS: Keychain Access (AES-256-GCM)
- Windows: Credential Manager (DPAPI)
- Linux: Secret Service API

## 6. Vulnerability Reporting and Disclosure

### 6.1 Reporting Process

- Contact: [security at hibiscusgames dot com]
- Expected response times:
  - Critical: 48 hours
  - High: 72 hours
  - Medium: 5 business days
  - Low: 10 business days

Note: This is a volunteer-maintained project. While we strive to address security concerns promptly, response times may vary.

### 6.2 Disclosure Policy

- Coordinated disclosure approach
- 90-day disclosure deadline
- Credit for reporters
- Public acknowledgment (if desired)

## 7. Client Application Security

### 7.1 Core Security Measures

- Input validation and sanitization
- Secure update distribution
- Code signing
- Dependency scanning
- Memory protection
- Secure file operations

### 7.2 Update Security

- Signed releases
- Update verification
- Rollback support
- Delta updates
- Automatic security patches

## 8. Data Privacy

### 8.1 Local Data

- No telemetry by default
- Opt-in crash reporting
- Local-only storage
- Secure cache handling
- Automatic data cleanup

### 8.2 Git Operations

- Credential verification
- Hook scanning
- Remote validation
- Protocol security

## 9. Policy Review

This security policy is reviewed:

- Annually
- After security incidents
- When adding major features
- Upon significant ecosystem changes

## 10. Implementation Notes

### 10.1 Security Features

- Platform keychain integration
- OAuth2/SSH support
- Update verification
- Local encryption
- Secure deletion

### 10.2 Development Practices

- Dependency auditing
- Code review requirements
- Security testing
- Static analysis
- Regular updates

## Contact

For security concerns, please contact:
[security at hibiscusgames dot com]

Response times may vary as this is a volunteer-maintained project. Critical vulnerabilities will be prioritized.

## Legal Notice

This security policy provides guidelines for secure usage and vulnerability reporting.
It does not override or modify any terms of the project's License, including but not limited to the warranty disclaimers and liability limitations.
Please refer to the full license for complete terms.
